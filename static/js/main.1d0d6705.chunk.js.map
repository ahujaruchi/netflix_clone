{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","console","log","fetchData","startX","scrollLeft","sliders","document","querySelectorAll","isDown","forEach","slider","addEventListener","e","classList","add","pageX","offsetLeft","remove","preventDefault","walk","removeEventListener","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","key","id","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","original_name","overview","substr","Navbar","show","handleShow","window","scrollY","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1d0d6705.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3/',\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from 'movie-trailer';\r\n\r\n\r\n\r\n\r\nconst base_url = 'http://image.tmdb.org/t/p/original/';\r\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    // options for reactyoutue player\r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n            //https://developers.google.com/youtube/player_parameters\r\n            autoplay: 1,\r\n        },\r\n\r\n    };\r\n\r\n    // click event handler\r\n    const handleClick = (movie) => {\r\n        setTrailerUrl('');\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n                .then((url) => {\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get('v'));\r\n\r\n                }).catch((error) => console.log(error))\r\n        }\r\n    }\r\n    /* const scrollref = useRef(null);*/\r\n\r\n\r\n\r\n\r\n\r\n    //A snippet of code which runs based on a specific condition/variable\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            console.log(request.data.results);\r\n            return request;\r\n        }\r\n\r\n        fetchData();\r\n\r\n        const sliders = document.querySelectorAll(\".row__posters\");\r\n        let isDown = false;\r\n        let startX;\r\n        let scrollLeft;\r\n        sliders.forEach(\r\n            function (slider) {\r\n                slider.addEventListener(\"dragstart\", e => {\r\n                    isDown = true;\r\n                    slider.classList.add(\"active\");\r\n                    startX = e.pageX - slider.offsetLeft;\r\n                    scrollLeft = slider.scrollLeft;\r\n                });\r\n                slider.addEventListener(\"dragleave\", () => {\r\n                    isDown = false;\r\n                    slider.classList.remove(\"active\");\r\n                });\r\n                /* slider.addEventListener(\"dragleave\", () => {\r\n                     isDown = false;\r\n                     slider.classList.remove(\"active\");\r\n                 });*/\r\n                slider.addEventListener(\"drag\", e => {\r\n                    if (!isDown) return;\r\n                    e.preventDefault();\r\n                    const x = e.pageX - slider.offsetLeft;\r\n                    const walk = x - startX;\r\n                    slider.scrollLeft = scrollLeft - walk;\r\n                });\r\n\r\n            });\r\n\r\n        return () => {\r\n            sliders.forEach(\r\n                function (slider) {\r\n                    slider.removeEventListener(\"drag\");\r\n                    slider.removeEventListener(\"dragleave\");\r\n                    /*    slider.removeEventListener(\"dragover\");*/\r\n                    slider.removeEventListener(\"dragstart\");\r\n                });\r\n        }\r\n    }, [fetchUrl]);\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row__posters\" >\r\n                {movies.map(movie => (\r\n                    <img\r\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                        onClick={() => handleClick(movie)}\r\n                        key={movie.id}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                        alt={movie.name} />\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n\r\n\r\n","const API_KEY = \"19f84e11932abbc79e6d83f82d6d1045\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/discover/movie?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n}\r\n\r\nexport default requests;\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from './axios';\r\nimport requests from \"./requests\"\r\nimport './Banner.css'\r\n\r\nconst Banner = () => {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)]);\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\" style={{ backgroundSize: \"cover\", backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"` }}>\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner__description\">{truncate(movie?.overview, 150)}</h1>\r\n                {/* div > 2 buttons */}\r\n                {/* description */}\r\n            </div>\r\n            <div className=\"banner__fadeBottom\"></div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Navbar.css';\r\n\r\n\r\nconst Navbar = () => {\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', () => {\r\n            if (window.scrollY > 100) {\r\n                handleShow(true);\r\n            } else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img className=\"nav__logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Logo_Netflix.png/800px-Logo_Netflix.png\" alt=\"Netflix Logo\" />\r\n\r\n            <img className=\"nav__avatar\" src=\"https://www.pngall.com/wp-content/uploads/5/Profile.png\" alt=\"Avatar\" />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Navbar from './Navbar';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Navbar />\n      <Banner />\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"TOP RATED\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"ACTION MOVIES\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"COMEDY MOVIES\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"HORROR MOVIES\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"ROMANCE MOVIES\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"DOCUMENTARIES\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}